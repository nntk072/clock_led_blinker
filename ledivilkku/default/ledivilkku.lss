
ledivilkku.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  000008de  00000972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000189  008000b4  008000b4  000009c6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000015b  00000000  00000000  00000a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000831  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000388  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ad  00000000  00000000  0000171a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002be  00000000  00000000  00002157  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	16 c0       	rjmp	.+44     	; 0x2e <__ctors_end>
   2:	30 c0       	rjmp	.+96     	; 0x64 <__bad_interrupt>
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	2e c0       	rjmp	.+92     	; 0x64 <__bad_interrupt>
   8:	18 c3       	rjmp	.+1584   	; 0x63a <__vector_4>
   a:	2c c0       	rjmp	.+88     	; 0x64 <__bad_interrupt>
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	2a c0       	rjmp	.+84     	; 0x64 <__bad_interrupt>
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	28 c0       	rjmp	.+80     	; 0x64 <__bad_interrupt>
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	26 c0       	rjmp	.+76     	; 0x64 <__bad_interrupt>
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	24 c0       	rjmp	.+72     	; 0x64 <__bad_interrupt>
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	22 c0       	rjmp	.+68     	; 0x64 <__bad_interrupt>
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>

00000022 <animation>:
  22:	65 37 30 61 77 66 66 66 66 00 00 00                 e70awffff...

0000002e <__ctors_end>:
  2e:	11 24       	eor	r1, r1
  30:	1f be       	out	0x3f, r1	; 63
  32:	cf e5       	ldi	r28, 0x5F	; 95
  34:	d2 e0       	ldi	r29, 0x02	; 2
  36:	de bf       	out	0x3e, r29	; 62
  38:	cd bf       	out	0x3d, r28	; 61

0000003a <__do_copy_data>:
  3a:	10 e0       	ldi	r17, 0x00	; 0
  3c:	a0 e6       	ldi	r26, 0x60	; 96
  3e:	b0 e0       	ldi	r27, 0x00	; 0
  40:	ee ed       	ldi	r30, 0xDE	; 222
  42:	f8 e0       	ldi	r31, 0x08	; 8
  44:	02 c0       	rjmp	.+4      	; 0x4a <.do_copy_data_start>

00000046 <.do_copy_data_loop>:
  46:	05 90       	lpm	r0, Z+
  48:	0d 92       	st	X+, r0

0000004a <.do_copy_data_start>:
  4a:	a4 3b       	cpi	r26, 0xB4	; 180
  4c:	b1 07       	cpc	r27, r17
  4e:	d9 f7       	brne	.-10     	; 0x46 <.do_copy_data_loop>

00000050 <__do_clear_bss>:
  50:	12 e0       	ldi	r17, 0x02	; 2
  52:	a4 eb       	ldi	r26, 0xB4	; 180
  54:	b0 e0       	ldi	r27, 0x00	; 0
  56:	01 c0       	rjmp	.+2      	; 0x5a <.do_clear_bss_start>

00000058 <.do_clear_bss_loop>:
  58:	1d 92       	st	X+, r1

0000005a <.do_clear_bss_start>:
  5a:	ad 33       	cpi	r26, 0x3D	; 61
  5c:	b1 07       	cpc	r27, r17
  5e:	e1 f7       	brne	.-8      	; 0x58 <.do_clear_bss_loop>
  60:	67 d1       	rcall	.+718    	; 0x330 <main>
  62:	3b c4       	rjmp	.+2166   	; 0x8da <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <animate_parsevalue>:
}



uint16_t animate_parsevalue(uint8_t digits)
{
  66:	38 2f       	mov	r19, r24
  68:	60 91 b8 00 	lds	r22, 0x00B8
  6c:	70 91 b9 00 	lds	r23, 0x00B9
  70:	fb 01       	movw	r30, r22
  72:	98 2f       	mov	r25, r24
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	50 e0       	ldi	r21, 0x00	; 0
  78:	1b c0       	rjmp	.+54     	; 0xb0 <animate_parsevalue+0x4a>
uint16_t result=0,c;
while (digits--)
   {
   c=pgm_read_byte_near(a_ptr++);
  7a:	24 91       	lpm	r18, Z+



uint8_t animate_hex2dec(uint8_t character)
{
if ((character>='0')&&(character<='9')) return(character-'0');
  7c:	82 2f       	mov	r24, r18
  7e:	80 53       	subi	r24, 0x30	; 48
  80:	8a 30       	cpi	r24, 0x0A	; 10
  82:	68 f0       	brcs	.+26     	; 0x9e <animate_parsevalue+0x38>
if ((character>='a')&&(character<='f')) return(character+10-'a');
  84:	81 53       	subi	r24, 0x31	; 49
  86:	86 30       	cpi	r24, 0x06	; 6
  88:	10 f4       	brcc	.+4      	; 0x8e <animate_parsevalue+0x28>
  8a:	86 5f       	subi	r24, 0xF6	; 246
  8c:	08 c0       	rjmp	.+16     	; 0x9e <animate_parsevalue+0x38>
if ((character>='A')&&(character<='F')) return(character+10-'A');
  8e:	82 2f       	mov	r24, r18
  90:	81 54       	subi	r24, 0x41	; 65
  92:	86 30       	cpi	r24, 0x06	; 6
  94:	10 f0       	brcs	.+4      	; 0x9a <animate_parsevalue+0x34>
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <animate_parsevalue+0x38>
  9a:	82 2f       	mov	r24, r18
  9c:	87 53       	subi	r24, 0x37	; 55
{
uint16_t result=0,c;
while (digits--)
   {
   c=pgm_read_byte_near(a_ptr++);
   result<<=4;
  9e:	24 e0       	ldi	r18, 0x04	; 4
  a0:	44 0f       	add	r20, r20
  a2:	55 1f       	adc	r21, r21
  a4:	2a 95       	dec	r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <animate_parsevalue+0x3a>
   result+=animate_hex2dec(c);
  a8:	48 0f       	add	r20, r24
  aa:	51 1d       	adc	r21, r1
  ac:	91 50       	subi	r25, 0x01	; 1
  ae:	31 96       	adiw	r30, 0x01	; 1


uint16_t animate_parsevalue(uint8_t digits)
{
uint16_t result=0,c;
while (digits--)
  b0:	99 23       	and	r25, r25
  b2:	19 f7       	brne	.-58     	; 0x7a <animate_parsevalue+0x14>
  b4:	63 0f       	add	r22, r19
  b6:	71 1d       	adc	r23, r1
  b8:	70 93 b9 00 	sts	0x00B9, r23
  bc:	60 93 b8 00 	sts	0x00B8, r22
   c=pgm_read_byte_near(a_ptr++);
   result<<=4;
   result+=animate_hex2dec(c);
   }
return(result);
}
  c0:	ca 01       	movw	r24, r20
  c2:	08 95       	ret

000000c4 <animate_hex2dec>:



uint8_t animate_hex2dec(uint8_t character)
{
  c4:	98 2f       	mov	r25, r24
if ((character>='0')&&(character<='9')) return(character-'0');
  c6:	80 53       	subi	r24, 0x30	; 48
  c8:	8a 30       	cpi	r24, 0x0A	; 10
  ca:	68 f0       	brcs	.+26     	; 0xe6 <animate_hex2dec+0x22>
if ((character>='a')&&(character<='f')) return(character+10-'a');
  cc:	81 53       	subi	r24, 0x31	; 49
  ce:	86 30       	cpi	r24, 0x06	; 6
  d0:	10 f4       	brcc	.+4      	; 0xd6 <animate_hex2dec+0x12>
  d2:	86 5f       	subi	r24, 0xF6	; 246
  d4:	08 95       	ret
if ((character>='A')&&(character<='F')) return(character+10-'A');
  d6:	89 2f       	mov	r24, r25
  d8:	81 54       	subi	r24, 0x41	; 65
  da:	86 30       	cpi	r24, 0x06	; 6
  dc:	10 f0       	brcs	.+4      	; 0xe2 <animate_hex2dec+0x1e>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret
  e2:	89 2f       	mov	r24, r25
  e4:	87 53       	subi	r24, 0x37	; 55
return(0); // should never happen
}
  e6:	08 95       	ret

000000e8 <tick>:


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
  e8:	90 91 b7 00 	lds	r25, 0x00B7
while (tmp==led_tick);
  ec:	80 91 b7 00 	lds	r24, 0x00B7
  f0:	98 17       	cp	r25, r24
  f2:	e1 f3       	breq	.-8      	; 0xec <tick+0x4>
}
  f4:	08 95       	ret

000000f6 <matrix>:
}



void matrix(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
while (led_phase==3);
  fa:	80 91 b5 00 	lds	r24, 0x00B5
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	e1 f3       	breq	.-8      	; 0xfa <matrix+0x4>
while (led_phase!=3);
 102:	80 91 b5 00 	lds	r24, 0x00B5
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	e1 f7       	brne	.-8      	; 0x102 <matrix+0xc>
 10a:	ec eb       	ldi	r30, 0xBC	; 188
 10c:	f1 e0       	ldi	r31, 0x01	; 1
uint8_t *ptr=l;
for (uint8_t i=255;i>255-16;i--)
   {
   uint8_t tmp;
   tmp=ptr[i];
 10e:	80 81       	ld	r24, Z
   if (tmp)
 110:	88 23       	and	r24, r24
 112:	11 f0       	breq	.+4      	; 0x118 <matrix+0x22>
      {
      ptr[i]=tmp-1;
 114:	81 50       	subi	r24, 0x01	; 1
 116:	80 83       	st	Z, r24
 118:	31 97       	sbiw	r30, 0x01	; 1
void matrix(void)
{
while (led_phase==3);
while (led_phase!=3);
uint8_t *ptr=l;
for (uint8_t i=255;i>255-16;i--)
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	ec 3a       	cpi	r30, 0xAC	; 172
 11e:	f8 07       	cpc	r31, r24
 120:	b1 f7       	brne	.-20     	; 0x10e <matrix+0x18>
 122:	4f ee       	ldi	r20, 0xEF	; 239
	  }
   }
for (uint8_t i=255-16;i!=255;i--) // careful with sign
   {
   uint8_t tmp;
   tmp=ptr[i];
 124:	24 2f       	mov	r18, r20
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	d9 01       	movw	r26, r18
 12a:	a3 54       	subi	r26, 0x43	; 67
 12c:	bf 4f       	sbci	r27, 0xFF	; 255
 12e:	9c 91       	ld	r25, X
   if (tmp)
 130:	99 23       	and	r25, r25
 132:	49 f0       	breq	.+18     	; 0x146 <matrix+0x50>
      {
	  if (ptr[i+16]<tmp)
 134:	f9 01       	movw	r30, r18
 136:	e3 53       	subi	r30, 0x33	; 51
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	80 81       	ld	r24, Z
 13c:	89 17       	cp	r24, r25
 13e:	08 f4       	brcc	.+2      	; 0x142 <matrix+0x4c>
	     {
		 ptr[i+16]=tmp;
 140:	90 83       	st	Z, r25
		 }
      ptr[i]=tmp-1;
 142:	91 50       	subi	r25, 0x01	; 1
 144:	9c 93       	st	X, r25
   if (tmp)
      {
      ptr[i]=tmp-1;
	  }
   }
for (uint8_t i=255-16;i!=255;i--) // careful with sign
 146:	41 50       	subi	r20, 0x01	; 1
 148:	68 f7       	brcc	.-38     	; 0x124 <matrix+0x2e>
 14a:	cd eb       	ldi	r28, 0xBD	; 189
 14c:	d0 e0       	ldi	r29, 0x00	; 0
		 ptr[i+16]=tmp;
		 }
      ptr[i]=tmp-1;
	  }
   }
for (uint8_t i=0;i<16;i++) if ((rand()&0x1f)==0x1f)
 14e:	23 d3       	rcall	.+1606   	; 0x796 <rand>
 150:	8f 71       	andi	r24, 0x1F	; 31
 152:	90 70       	andi	r25, 0x00	; 0
 154:	4f 97       	sbiw	r24, 0x1f	; 31
 156:	59 f4       	brne	.+22     	; 0x16e <matrix+0x78>
   {
   rand();rand();rand();rand();rand();rand();rand();rand();
 158:	1e d3       	rcall	.+1596   	; 0x796 <rand>
 15a:	1d d3       	rcall	.+1594   	; 0x796 <rand>
 15c:	1c d3       	rcall	.+1592   	; 0x796 <rand>
 15e:	1b d3       	rcall	.+1590   	; 0x796 <rand>
 160:	1a d3       	rcall	.+1588   	; 0x796 <rand>
 162:	19 d3       	rcall	.+1586   	; 0x796 <rand>
 164:	18 d3       	rcall	.+1584   	; 0x796 <rand>
 166:	17 d3       	rcall	.+1582   	; 0x796 <rand>
   l[i]=rand()&0x0f;
 168:	16 d3       	rcall	.+1580   	; 0x796 <rand>
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	88 83       	st	Y, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
		 ptr[i+16]=tmp;
		 }
      ptr[i]=tmp-1;
	  }
   }
for (uint8_t i=0;i<16;i++) if ((rand()&0x1f)==0x1f)
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	cd 3c       	cpi	r28, 0xCD	; 205
 174:	d8 07       	cpc	r29, r24
 176:	59 f7       	brne	.-42     	; 0x14e <matrix+0x58>
 178:	90 e0       	ldi	r25, 0x00	; 0


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 17a:	20 91 b7 00 	lds	r18, 0x00B7
while (tmp==led_tick);
 17e:	80 91 b7 00 	lds	r24, 0x00B7
 182:	28 17       	cp	r18, r24
 184:	e1 f3       	breq	.-8      	; 0x17e <matrix+0x88>
for (uint8_t i=0;i<16;i++) if ((rand()&0x1f)==0x1f)
   {
   rand();rand();rand();rand();rand();rand();rand();rand();
   l[i]=rand()&0x0f;
   }
for (uint8_t i=0;i<7;i++) tick();
 186:	9f 5f       	subi	r25, 0xFF	; 255
 188:	97 30       	cpi	r25, 0x07	; 7
 18a:	b9 f7       	brne	.-18     	; 0x17a <matrix+0x84>
l2led();
 18c:	d2 d1       	rcall	.+932    	; 0x532 <l2led>
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <animate>:
}



void animate(void)
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
	     break;
	  case 'w':
	     a_w=animate_parsevalue(4);
	     break;
      default:	// should never happen - reset animation
	     a_ptr=animation;
 198:	c2 e2       	ldi	r28, 0x22	; 34
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	43 c0       	rjmp	.+134    	; 0x224 <animate+0x90>
void animate(void)
{
uint8_t a_b;
while (a_w==0) // loop until we reach wait statement - or are already waiting
   {
   a_b=pgm_read_byte_near(a_ptr++);
 19e:	e0 91 b8 00 	lds	r30, 0x00B8
 1a2:	f0 91 b9 00 	lds	r31, 0x00B9
 1a6:	31 96       	adiw	r30, 0x01	; 1
 1a8:	f0 93 b9 00 	sts	0x00B9, r31
 1ac:	e0 93 b8 00 	sts	0x00B8, r30
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	84 91       	lpm	r24, Z+
   if (a_b==0) // end reached - reset and wait for one cycle (to defend agaist empty lists)
 1b4:	88 23       	and	r24, r24
 1b6:	39 f4       	brne	.+14     	; 0x1c6 <animate+0x32>
	  {
	  a_ptr=animation;
 1b8:	82 e2       	ldi	r24, 0x22	; 34
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	90 93 b9 00 	sts	0x00B9, r25
 1c0:	80 93 b8 00 	sts	0x00B8, r24
 1c4:	7b c0       	rjmp	.+246    	; 0x2bc <__stack+0x5d>
	  return;
	  }
   switch(a_b)
 1c6:	85 36       	cpi	r24, 0x65	; 101
 1c8:	51 f0       	breq	.+20     	; 0x1de <animate+0x4a>
 1ca:	86 36       	cpi	r24, 0x66	; 102
 1cc:	18 f4       	brcc	.+6      	; 0x1d4 <animate+0x40>
 1ce:	81 36       	cpi	r24, 0x61	; 97
 1d0:	29 f5       	brne	.+74     	; 0x21c <animate+0x88>
 1d2:	13 c0       	rjmp	.+38     	; 0x1fa <animate+0x66>
 1d4:	83 37       	cpi	r24, 0x73	; 115
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <animate+0x54>
 1d8:	87 37       	cpi	r24, 0x77	; 119
 1da:	01 f5       	brne	.+64     	; 0x21c <animate+0x88>
 1dc:	18 c0       	rjmp	.+48     	; 0x20e <animate+0x7a>
      {
	  case 'e':
	     a_e=animate_parsevalue(2);
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	42 df       	rcall	.-380    	; 0x66 <animate_parsevalue>
 1e2:	80 93 ba 00 	sts	0x00BA, r24
 1e6:	1e c0       	rjmp	.+60     	; 0x224 <animate+0x90>
	     break;
	  case 's':
	     l[animate_parsevalue(2)]=a_e;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	3d df       	rcall	.-390    	; 0x66 <animate_parsevalue>
 1ec:	fc 01       	movw	r30, r24
 1ee:	e3 54       	subi	r30, 0x43	; 67
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	80 91 ba 00 	lds	r24, 0x00BA
 1f6:	80 83       	st	Z, r24
 1f8:	15 c0       	rjmp	.+42     	; 0x224 <animate+0x90>
	     break;
	  case 'a':
	     for (uint16_t i=0;i<256;i++) l[i]=a_e;
 1fa:	80 91 ba 00 	lds	r24, 0x00BA
 1fe:	ed eb       	ldi	r30, 0xBD	; 189
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	81 93       	st	Z+, r24
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	ed 3b       	cpi	r30, 0xBD	; 189
 208:	f2 07       	cpc	r31, r18
 20a:	d9 f7       	brne	.-10     	; 0x202 <animate+0x6e>
 20c:	0b c0       	rjmp	.+22     	; 0x224 <animate+0x90>
	     break;
	  case 'w':
	     a_w=animate_parsevalue(4);
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	2a df       	rcall	.-428    	; 0x66 <animate_parsevalue>
 212:	90 93 bc 00 	sts	0x00BC, r25
 216:	80 93 bb 00 	sts	0x00BB, r24
 21a:	04 c0       	rjmp	.+8      	; 0x224 <animate+0x90>
	     break;
      default:	// should never happen - reset animation
	     a_ptr=animation;
 21c:	d0 93 b9 00 	sts	0x00B9, r29
 220:	c0 93 b8 00 	sts	0x00B8, r28


void animate(void)
{
uint8_t a_b;
while (a_w==0) // loop until we reach wait statement - or are already waiting
 224:	80 91 bb 00 	lds	r24, 0x00BB
 228:	90 91 bc 00 	lds	r25, 0x00BC
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	09 f4       	brne	.+2      	; 0x232 <animate+0x9e>
 230:	b6 cf       	rjmp	.-148    	; 0x19e <animate+0xa>
      default:	// should never happen - reset animation
	     a_ptr=animation;
	     break;
	  }
   }
if (a_w!=0xffff) a_w--; // 0xffff equals STOP
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	8f 3f       	cpi	r24, 0xFF	; 255
 236:	92 07       	cpc	r25, r18
 238:	29 f0       	breq	.+10     	; 0x244 <animate+0xb0>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	90 93 bc 00 	sts	0x00BC, r25
 240:	80 93 bb 00 	sts	0x00BB, r24
if (led_tick&0x03) return; // run autoanimation only every 4th tick
 244:	80 91 b7 00 	lds	r24, 0x00B7
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	83 70       	andi	r24, 0x03	; 3
 24c:	90 70       	andi	r25, 0x00	; 0
 24e:	89 2b       	or	r24, r25
 250:	a9 f5       	brne	.+106    	; 0x2bc <__stack+0x5d>
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
		 if (a_d&0xf0)
		    {
			a_d=0x00;
			if (a_c&0x40)
			   {
			   a_c^=0x20;
 256:	60 e2       	ldi	r22, 0x20	; 32
   }
if (a_w!=0xffff) a_w--; // 0xffff equals STOP
if (led_tick&0x03) return; // run autoanimation only every 4th tick
uint8_t i=0;
do {
   uint8_t a_tmp=l[i];
 258:	a4 2f       	mov	r26, r20
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	fd 01       	movw	r30, r26
 25e:	e3 54       	subi	r30, 0x43	; 67
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	e0 81       	ld	r30, Z
   if (a_tmp&0x10) // automatic animation command for this led
 264:	e4 ff       	sbrs	r30, 4
 266:	23 c0       	rjmp	.+70     	; 0x2ae <__stack+0x4f>
      {
	  uint8_t a_c,a_d;
	  a_d=a_tmp&0x0f;
 268:	8e 2f       	mov	r24, r30
 26a:	8f 70       	andi	r24, 0x0F	; 15
	  a_c=a_tmp&0xf0;
 26c:	2e 2f       	mov	r18, r30
 26e:	20 7f       	andi	r18, 0xF0	; 240
      if (a_c&0x20)
 270:	25 ff       	sbrs	r18, 5
 272:	0d c0       	rjmp	.+26     	; 0x28e <__stack+0x2f>
	     {
		 a_d++;
 274:	98 2f       	mov	r25, r24
 276:	9f 5f       	subi	r25, 0xFF	; 255
		 if (a_d&0xf0)
 278:	89 2f       	mov	r24, r25
 27a:	80 7f       	andi	r24, 0xF0	; 240
 27c:	a1 f0       	breq	.+40     	; 0x2a6 <__stack+0x47>
		    {
			a_d=0x0f;
			if (a_c&0x40)
 27e:	26 ff       	sbrs	r18, 6
 280:	02 c0       	rjmp	.+4      	; 0x286 <__stack+0x27>
			   {
			   a_c^=0x20;
 282:	26 27       	eor	r18, r22
 284:	02 c0       	rjmp	.+4      	; 0x28a <__stack+0x2b>
			   }
            else
			   {
			   a_c&=~0x10;
 286:	2e 2f       	mov	r18, r30
 288:	20 7e       	andi	r18, 0xE0	; 224
 28a:	9f e0       	ldi	r25, 0x0F	; 15
 28c:	0c c0       	rjmp	.+24     	; 0x2a6 <__stack+0x47>
			   }
			}
		 }
      else
	     {
		 a_d--;
 28e:	98 2f       	mov	r25, r24
 290:	91 50       	subi	r25, 0x01	; 1
		 if (a_d&0xf0)
 292:	89 2f       	mov	r24, r25
 294:	80 7f       	andi	r24, 0xF0	; 240
 296:	39 f0       	breq	.+14     	; 0x2a6 <__stack+0x47>
		    {
			a_d=0x00;
			if (a_c&0x40)
 298:	26 ff       	sbrs	r18, 6
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__stack+0x41>
			   {
			   a_c^=0x20;
 29c:	26 27       	eor	r18, r22
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__stack+0x45>
			   }
            else
			   {
			   a_c&=~0x10;
 2a0:	2e 2f       	mov	r18, r30
 2a2:	20 7e       	andi	r18, 0xE0	; 224
 2a4:	90 e0       	ldi	r25, 0x00	; 0
			   }
            }
		 }
      l[i]=a_c|a_d;
 2a6:	a3 54       	subi	r26, 0x43	; 67
 2a8:	bf 4f       	sbci	r27, 0xFF	; 255
 2aa:	92 2b       	or	r25, r18
 2ac:	9c 93       	st	X, r25
 2ae:	4f 5f       	subi	r20, 0xFF	; 255
 2b0:	5f 4f       	sbci	r21, 0xFF	; 255
	  }
   i++;
   }
while (i!=0); // loop all 256 values
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	40 30       	cpi	r20, 0x00	; 0
 2b6:	58 07       	cpc	r21, r24
 2b8:	79 f6       	brne	.-98     	; 0x258 <animate+0xc4>
l2led();
 2ba:	3b d1       	rcall	.+630    	; 0x532 <l2led>
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <powerdown>:



void powerdown(void)
{
led_init(); // immediately blank display
 2c2:	5b d0       	rcall	.+182    	; 0x37a <led_init>
while (led_button);
 2c4:	80 91 b6 00 	lds	r24, 0x00B6
 2c8:	88 23       	and	r24, r24
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <powerdown+0x2>


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 2cc:	90 91 b7 00 	lds	r25, 0x00B7
while (tmp==led_tick);
 2d0:	80 91 b7 00 	lds	r24, 0x00B7
 2d4:	98 17       	cp	r25, r24
 2d6:	e1 f3       	breq	.-8      	; 0x2d0 <powerdown+0xe>


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 2d8:	90 91 b7 00 	lds	r25, 0x00B7
while (tmp==led_tick);
 2dc:	80 91 b7 00 	lds	r24, 0x00B7
 2e0:	98 17       	cp	r25, r24
 2e2:	e1 f3       	breq	.-8      	; 0x2dc <powerdown+0x1a>
{
led_init(); // immediately blank display
while (led_button);
tick();
tick();
cli();
 2e4:	f8 94       	cli
TIMSK=0x00;  // disable timer 1 compare A interrupt
 2e6:	19 be       	out	0x39, r1	; 57
DDRA=0x00;
 2e8:	1a ba       	out	0x1a, r1	; 26
DDRB=0x00;
 2ea:	17 ba       	out	0x17, r1	; 23
DDRC=0x00;
 2ec:	14 ba       	out	0x14, r1	; 20
DDRD=0x00;
 2ee:	11 ba       	out	0x11, r1	; 17
DDRE=0x00;
 2f0:	16 b8       	out	0x06, r1	; 6
PORTA=0x00;
 2f2:	1b ba       	out	0x1b, r1	; 27
PORTB=0x00;
 2f4:	18 ba       	out	0x18, r1	; 24
PORTC=0x00;
 2f6:	15 ba       	out	0x15, r1	; 21
PORTD=0x04;
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	82 bb       	out	0x12, r24	; 18
PORTE=0x00;
 2fc:	17 b8       	out	0x07, r1	; 7
MCUCR&=~0x03; // select low level for INT0
 2fe:	85 b7       	in	r24, 0x35	; 53
 300:	8c 7f       	andi	r24, 0xFC	; 252
 302:	85 bf       	out	0x35, r24	; 53
GIFR=0x00;		// clear pending interrupts
 304:	1a be       	out	0x3a, r1	; 58
GICR=0x40;		// enable INT0
 306:	80 e4       	ldi	r24, 0x40	; 64
 308:	8b bf       	out	0x3b, r24	; 59
sei();
 30a:	78 94       	sei
MCUCR|=0x20; // enable sleep
 30c:	85 b7       	in	r24, 0x35	; 53
 30e:	80 62       	ori	r24, 0x20	; 32
 310:	85 bf       	out	0x35, r24	; 53
asm volatile("sleep\n");
 312:	88 95       	sleep
}
 314:	08 95       	ret

00000316 <setup>:



void setup(void)
{
led_init();
 316:	31 d0       	rcall	.+98     	; 0x37a <led_init>
a_ptr=&animation[0];
 318:	82 e2       	ldi	r24, 0x22	; 34
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 b9 00 	sts	0x00B9, r25
 320:	80 93 b8 00 	sts	0x00B8, r24
a_w=0;
 324:	10 92 bc 00 	sts	0x00BC, r1
 328:	10 92 bb 00 	sts	0x00BB, r1
sei();
 32c:	78 94       	sei
}
 32e:	08 95       	ret

00000330 <main>:



int main(void)
{
setup();
 330:	f2 df       	rcall	.-28     	; 0x316 <setup>
 332:	90 e0       	ldi	r25, 0x00	; 0


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 334:	20 91 b7 00 	lds	r18, 0x00B7
while (tmp==led_tick);
 338:	80 91 b7 00 	lds	r24, 0x00B7
 33c:	28 17       	cp	r18, r24
 33e:	e1 f3       	breq	.-8      	; 0x338 <main+0x8>


int main(void)
{
setup();
for (uint8_t i=0;i<20;i++) tick();
 340:	9f 5f       	subi	r25, 0xFF	; 255
 342:	94 31       	cpi	r25, 0x14	; 20
 344:	b9 f7       	brne	.-18     	; 0x334 <main+0x4>
while (led_button);
 346:	80 91 b6 00 	lds	r24, 0x00B6
 34a:	88 23       	and	r24, r24
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x16>
 34e:	90 e0       	ldi	r25, 0x00	; 0


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 350:	20 91 b7 00 	lds	r18, 0x00B7
while (tmp==led_tick);
 354:	80 91 b7 00 	lds	r24, 0x00B7
 358:	28 17       	cp	r18, r24
 35a:	e1 f3       	breq	.-8      	; 0x354 <main+0x24>
int main(void)
{
setup();
for (uint8_t i=0;i<20;i++) tick();
while (led_button);
for (uint8_t i=0;i<20;i++) tick();
 35c:	9f 5f       	subi	r25, 0xFF	; 255
 35e:	94 31       	cpi	r25, 0x14	; 20
 360:	b9 f7       	brne	.-18     	; 0x350 <main+0x20>
while(1)
	{
	if (led_button) powerdown();
 362:	80 91 b6 00 	lds	r24, 0x00B6
 366:	81 11       	cpse	r24, r1
 368:	ac df       	rcall	.-168    	; 0x2c2 <powerdown>
	if (1)
	   {
	   animate();
 36a:	14 df       	rcall	.-472    	; 0x194 <animate>


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 36c:	90 91 b7 00 	lds	r25, 0x00B7
while (tmp==led_tick);
 370:	80 91 b7 00 	lds	r24, 0x00B7
 374:	98 17       	cp	r25, r24
 376:	e1 f3       	breq	.-8      	; 0x370 <main+0x40>
 378:	f4 cf       	rjmp	.-24     	; 0x362 <main+0x32>

0000037a <led_init>:


void led_init(void)
{
// clear sleep enable - select powerdown as later sleep mode
MCUCR&=~0x20;
 37a:	85 b7       	in	r24, 0x35	; 53
 37c:	8f 7d       	andi	r24, 0xDF	; 223
 37e:	85 bf       	out	0x35, r24	; 53
MCUCR|=0x10;
 380:	85 b7       	in	r24, 0x35	; 53
 382:	80 61       	ori	r24, 0x10	; 16
 384:	85 bf       	out	0x35, r24	; 53
MCUCSR&=~0x20;
 386:	84 b7       	in	r24, 0x34	; 52
 388:	8f 7d       	andi	r24, 0xDF	; 223
 38a:	84 bf       	out	0x34, r24	; 52
EMCUCR&=~0x80;
 38c:	86 b7       	in	r24, 0x36	; 54
 38e:	8f 77       	andi	r24, 0x7F	; 127
 390:	86 bf       	out	0x36, r24	; 54
GICR=0x00;		// disable INT0
 392:	1b be       	out	0x3b, r1	; 59
 394:	25 ec       	ldi	r18, 0xC5	; 197
 396:	31 e0       	ldi	r19, 0x01	; 1
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0

for (uint8_t i=0;i<ROWS;i++)
   {
   for (uint8_t j=0;j<4;j++)
      {
   	  l_port[i][j][0]=0xff; // A and B
 39c:	4f ef       	ldi	r20, 0xFF	; 255
 39e:	0d c0       	rjmp	.+26     	; 0x3ba <led_init+0x40>
 3a0:	40 83       	st	Z, r20
   	  l_port[i][j][1]=0xff; // D
 3a2:	41 83       	std	Z+1, r20	; 0x01
 3a4:	32 96       	adiw	r30, 0x02	; 2
EMCUCR&=~0x80;
GICR=0x00;		// disable INT0

for (uint8_t i=0;i<ROWS;i++)
   {
   for (uint8_t j=0;j<4;j++)
 3a6:	e2 17       	cp	r30, r18
 3a8:	f3 07       	cpc	r31, r19
 3aa:	d1 f7       	brne	.-12     	; 0x3a0 <led_init+0x26>
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	9f 01       	movw	r18, r30
 3b0:	28 5f       	subi	r18, 0xF8	; 248
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
MCUCR|=0x10;
MCUCSR&=~0x20;
EMCUCR&=~0x80;
GICR=0x00;		// disable INT0

for (uint8_t i=0;i<ROWS;i++)
 3b4:	80 31       	cpi	r24, 0x10	; 16
 3b6:	91 05       	cpc	r25, r1
 3b8:	49 f0       	breq	.+18     	; 0x3cc <led_init+0x52>
 3ba:	fc 01       	movw	r30, r24
 3bc:	53 e0       	ldi	r21, 0x03	; 3
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	5a 95       	dec	r21
 3c4:	e1 f7       	brne	.-8      	; 0x3be <led_init+0x44>
 3c6:	e3 54       	subi	r30, 0x43	; 67
 3c8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ca:	ea cf       	rjmp	.-44     	; 0x3a0 <led_init+0x26>
 3cc:	ed eb       	ldi	r30, 0xBD	; 189
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
      {
   	  l_port[i][j][0]=0xff; // A and B
   	  l_port[i][j][1]=0xff; // D
	  }
   }
for (uint16_t i=0;i<ROWS*ROWS;i++) l[i]=0;
 3d0:	11 92       	st	Z+, r1
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	ed 3b       	cpi	r30, 0xBD	; 189
 3d6:	f8 07       	cpc	r31, r24
 3d8:	d9 f7       	brne	.-10     	; 0x3d0 <led_init+0x56>

// set data direction for matrix driving pins to output
DDRA=0xff;
 3da:	9f ef       	ldi	r25, 0xFF	; 255
 3dc:	9a bb       	out	0x1a, r25	; 26
DDRB=0x1f;
 3de:	2f e1       	ldi	r18, 0x1F	; 31
 3e0:	27 bb       	out	0x17, r18	; 23
DDRC=0xff;
 3e2:	94 bb       	out	0x14, r25	; 20
DDRD=0xff;
 3e4:	91 bb       	out	0x11, r25	; 17
DDRE=0x07;
 3e6:	87 e0       	ldi	r24, 0x07	; 7
 3e8:	86 b9       	out	0x06, r24	; 6

// disable all - columns 1, rows 0
PORTA=0x07;
 3ea:	8b bb       	out	0x1b, r24	; 27
PORTB=0x1f;
 3ec:	28 bb       	out	0x18, r18	; 24
PORTC=0x00;
 3ee:	15 ba       	out	0x15, r1	; 21
PORTD=0xff;
 3f0:	92 bb       	out	0x12, r25	; 18
PORTE=0x00;
 3f2:	17 b8       	out	0x07, r1	; 7

// set timer interrupt
TCCR1A=0x00; // CTC mode
 3f4:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x08; // no clock yet
 3f6:	88 e0       	ldi	r24, 0x08	; 8
 3f8:	8e bd       	out	0x2e, r24	; 46
TCNT1=0;     // clear counter (not really necessary after reset)
 3fa:	1d bc       	out	0x2d, r1	; 45
 3fc:	1c bc       	out	0x2c, r1	; 44
OCR1A=256;   // 
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	9b bd       	out	0x2b, r25	; 43
 404:	8a bd       	out	0x2a, r24	; 42
TIMSK=0x40;  // enable compare A interrupt
 406:	80 e4       	ldi	r24, 0x40	; 64
 408:	89 bf       	out	0x39, r24	; 57
TIFR=0x40;	 // clear possible pending flag (not really necessary, but nice)
 40a:	88 bf       	out	0x38, r24	; 56
TCCR1B=0x09; // start - full speed
 40c:	89 e0       	ldi	r24, 0x09	; 9
 40e:	8e bd       	out	0x2e, r24	; 46
}
 410:	08 95       	ret

00000412 <led_set>:

void led_set(uint8_t x, uint8_t y, uint8_t value)
{
uint8_t port;
uint8_t bit;
port=X[x].port;
 412:	e8 2f       	mov	r30, r24
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	e0 59       	subi	r30, 0x90	; 144
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	30 81       	ld	r19, Z
bit=1<<X[x].bit;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	01 80       	ldd	r0, Z+1	; 0x01
 426:	02 c0       	rjmp	.+4      	; 0x42c <led_set+0x1a>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <led_set+0x16>
 430:	28 2f       	mov	r18, r24
 432:	e6 2f       	mov	r30, r22
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	83 2f       	mov	r24, r19
 438:	90 e0       	ldi	r25, 0x00	; 0
if (value&0x01)
 43a:	40 ff       	sbrs	r20, 0
 43c:	0e c0       	rjmp	.+28     	; 0x45a <led_set+0x48>
   {
   l_port[y][0][port]&=~bit;
 43e:	b3 e0       	ldi	r27, 0x03	; 3
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	ba 95       	dec	r27
 446:	e1 f7       	brne	.-8      	; 0x440 <led_set+0x2e>
 448:	e8 0f       	add	r30, r24
 44a:	f9 1f       	adc	r31, r25
 44c:	e3 54       	subi	r30, 0x43	; 67
 44e:	fe 4f       	sbci	r31, 0xFE	; 254
 450:	82 2f       	mov	r24, r18
 452:	80 95       	com	r24
 454:	90 81       	ld	r25, Z
 456:	89 23       	and	r24, r25
 458:	0b c0       	rjmp	.+22     	; 0x470 <led_set+0x5e>
   }
else
   {
   l_port[y][0][port]|=bit;
 45a:	a3 e0       	ldi	r26, 0x03	; 3
 45c:	ee 0f       	add	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	aa 95       	dec	r26
 462:	e1 f7       	brne	.-8      	; 0x45c <led_set+0x4a>
 464:	e8 0f       	add	r30, r24
 466:	f9 1f       	adc	r31, r25
 468:	e3 54       	subi	r30, 0x43	; 67
 46a:	fe 4f       	sbci	r31, 0xFE	; 254
 46c:	80 81       	ld	r24, Z
 46e:	82 2b       	or	r24, r18
 470:	80 83       	st	Z, r24
 472:	e6 2f       	mov	r30, r22
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	83 2f       	mov	r24, r19
 478:	90 e0       	ldi	r25, 0x00	; 0
   }
if (value&0x02)
 47a:	41 ff       	sbrs	r20, 1
 47c:	0e c0       	rjmp	.+28     	; 0x49a <led_set+0x88>
   {
   l_port[y][1][port]&=~bit;
 47e:	73 e0       	ldi	r23, 0x03	; 3
 480:	ee 0f       	add	r30, r30
 482:	ff 1f       	adc	r31, r31
 484:	7a 95       	dec	r23
 486:	e1 f7       	brne	.-8      	; 0x480 <led_set+0x6e>
 488:	e3 54       	subi	r30, 0x43	; 67
 48a:	fe 4f       	sbci	r31, 0xFE	; 254
 48c:	e8 0f       	add	r30, r24
 48e:	f9 1f       	adc	r31, r25
 490:	82 2f       	mov	r24, r18
 492:	80 95       	com	r24
 494:	92 81       	ldd	r25, Z+2	; 0x02
 496:	89 23       	and	r24, r25
 498:	0b c0       	rjmp	.+22     	; 0x4b0 <led_set+0x9e>
   }
else
   {
   l_port[y][1][port]|=bit;
 49a:	53 e0       	ldi	r21, 0x03	; 3
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	5a 95       	dec	r21
 4a2:	e1 f7       	brne	.-8      	; 0x49c <led_set+0x8a>
 4a4:	e3 54       	subi	r30, 0x43	; 67
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	e8 0f       	add	r30, r24
 4aa:	f9 1f       	adc	r31, r25
 4ac:	82 81       	ldd	r24, Z+2	; 0x02
 4ae:	82 2b       	or	r24, r18
 4b0:	82 83       	std	Z+2, r24	; 0x02
 4b2:	e6 2f       	mov	r30, r22
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	83 2f       	mov	r24, r19
 4b8:	90 e0       	ldi	r25, 0x00	; 0
   }
if (value&0x04)
 4ba:	42 ff       	sbrs	r20, 2
 4bc:	0e c0       	rjmp	.+28     	; 0x4da <led_set+0xc8>
   {
   l_port[y][2][port]&=~bit;
 4be:	b3 e0       	ldi	r27, 0x03	; 3
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	ba 95       	dec	r27
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <led_set+0xae>
 4c8:	e3 54       	subi	r30, 0x43	; 67
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	e8 0f       	add	r30, r24
 4ce:	f9 1f       	adc	r31, r25
 4d0:	82 2f       	mov	r24, r18
 4d2:	80 95       	com	r24
 4d4:	94 81       	ldd	r25, Z+4	; 0x04
 4d6:	89 23       	and	r24, r25
 4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <led_set+0xde>
   }
else
   {
   l_port[y][2][port]|=bit;
 4da:	a3 e0       	ldi	r26, 0x03	; 3
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	aa 95       	dec	r26
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <led_set+0xca>
 4e4:	e3 54       	subi	r30, 0x43	; 67
 4e6:	fe 4f       	sbci	r31, 0xFE	; 254
 4e8:	e8 0f       	add	r30, r24
 4ea:	f9 1f       	adc	r31, r25
 4ec:	84 81       	ldd	r24, Z+4	; 0x04
 4ee:	82 2b       	or	r24, r18
 4f0:	84 83       	std	Z+4, r24	; 0x04
 4f2:	e6 2f       	mov	r30, r22
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	83 2f       	mov	r24, r19
 4f8:	90 e0       	ldi	r25, 0x00	; 0
   }
if (value&0x08)
 4fa:	43 ff       	sbrs	r20, 3
 4fc:	0d c0       	rjmp	.+26     	; 0x518 <led_set+0x106>
   {
   l_port[y][3][port]&=~bit;
 4fe:	73 e0       	ldi	r23, 0x03	; 3
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	7a 95       	dec	r23
 506:	e1 f7       	brne	.-8      	; 0x500 <led_set+0xee>
 508:	e3 54       	subi	r30, 0x43	; 67
 50a:	fe 4f       	sbci	r31, 0xFE	; 254
 50c:	e8 0f       	add	r30, r24
 50e:	f9 1f       	adc	r31, r25
 510:	20 95       	com	r18
 512:	86 81       	ldd	r24, Z+6	; 0x06
 514:	28 23       	and	r18, r24
 516:	0b c0       	rjmp	.+22     	; 0x52e <led_set+0x11c>
   }
else
   {
   l_port[y][3][port]|=bit;
 518:	63 e0       	ldi	r22, 0x03	; 3
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	6a 95       	dec	r22
 520:	e1 f7       	brne	.-8      	; 0x51a <led_set+0x108>
 522:	e3 54       	subi	r30, 0x43	; 67
 524:	fe 4f       	sbci	r31, 0xFE	; 254
 526:	e8 0f       	add	r30, r24
 528:	f9 1f       	adc	r31, r25
 52a:	86 81       	ldd	r24, Z+6	; 0x06
 52c:	28 2b       	or	r18, r24
 52e:	26 83       	std	Z+6, r18	; 0x06
 530:	08 95       	ret

00000532 <l2led>:
}



void l2led()
{
 532:	8f 92       	push	r8
 534:	9f 92       	push	r9
 536:	af 92       	push	r10
 538:	bf 92       	push	r11
 53a:	cf 92       	push	r12
 53c:	df 92       	push	r13
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	ad eb       	ldi	r26, 0xBD	; 189
 54c:	b1 e0       	ldi	r27, 0x01	; 1
 54e:	cc 24       	eor	r12, r12
 550:	dd 24       	eor	r13, r13
   {
   tmp0=0;tmp1=0;tmp2=0;tmp3=0;
   for(i=0;i<16;i++)
      {
	  tmp=l[j*16+l_order[i]];
	  tmp0=(tmp0<<1)|((tmp&0x01) ? 0 : 1);
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	a9 2e       	mov	r10, r25
 556:	b1 2c       	mov	r11, r1
 558:	50 c0       	rjmp	.+160    	; 0x5fa <l2led+0xc8>
 55a:	00 0f       	add	r16, r16
 55c:	11 1f       	adc	r17, r17
 55e:	f7 01       	movw	r30, r14
 560:	81 91       	ld	r24, Z+
 562:	7f 01       	movw	r14, r30
 564:	f4 01       	movw	r30, r8
 566:	e8 0f       	add	r30, r24
 568:	f1 1d       	adc	r31, r1
 56a:	20 81       	ld	r18, Z
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	c9 01       	movw	r24, r18
 570:	8a 25       	eor	r24, r10
 572:	9b 25       	eor	r25, r11
 574:	81 70       	andi	r24, 0x01	; 1
 576:	90 70       	andi	r25, 0x00	; 0
 578:	08 2b       	or	r16, r24
 57a:	19 2b       	or	r17, r25
	  tmp1=(tmp1<<1)|((tmp&0x02) ? 0 : 1);
 57c:	cc 0f       	add	r28, r28
 57e:	dd 1f       	adc	r29, r29
 580:	c9 01       	movw	r24, r18
 582:	96 95       	lsr	r25
 584:	87 95       	ror	r24
 586:	8a 25       	eor	r24, r10
 588:	9b 25       	eor	r25, r11
 58a:	81 70       	andi	r24, 0x01	; 1
 58c:	90 70       	andi	r25, 0x00	; 0
 58e:	c8 2b       	or	r28, r24
 590:	d9 2b       	or	r29, r25
	  tmp2=(tmp2<<1)|((tmp&0x04) ? 0 : 1);
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	36 95       	lsr	r19
 598:	27 95       	ror	r18
 59a:	36 95       	lsr	r19
 59c:	27 95       	ror	r18
 59e:	c9 01       	movw	r24, r18
 5a0:	8a 25       	eor	r24, r10
 5a2:	9b 25       	eor	r25, r11
 5a4:	81 70       	andi	r24, 0x01	; 1
 5a6:	90 70       	andi	r25, 0x00	; 0
 5a8:	68 2b       	or	r22, r24
 5aa:	79 2b       	or	r23, r25
	  tmp3=(tmp3<<1)|((tmp&0x08) ? 0 : 1);
 5ac:	44 0f       	add	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	36 95       	lsr	r19
 5b2:	27 95       	ror	r18
 5b4:	2a 25       	eor	r18, r10
 5b6:	3b 25       	eor	r19, r11
 5b8:	21 70       	andi	r18, 0x01	; 1
 5ba:	30 70       	andi	r19, 0x00	; 0
 5bc:	42 2b       	or	r20, r18
 5be:	53 2b       	or	r21, r19
uint8_t i,j,tmp;
uint16_t tmp0,tmp1,tmp2,tmp3;
for(j=0;j<16;j++)
   {
   tmp0=0;tmp1=0;tmp2=0;tmp3=0;
   for(i=0;i<16;i++)
 5c0:	f0 e7       	ldi	r31, 0x70	; 112
 5c2:	ef 16       	cp	r14, r31
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	ff 06       	cpc	r15, r31
 5c8:	41 f6       	brne	.-112    	; 0x55a <l2led+0x28>
	  tmp0=(tmp0<<1)|((tmp&0x01) ? 0 : 1);
	  tmp1=(tmp1<<1)|((tmp&0x02) ? 0 : 1);
	  tmp2=(tmp2<<1)|((tmp&0x04) ? 0 : 1);
	  tmp3=(tmp3<<1)|((tmp&0x08) ? 0 : 1);
	  }
   *(uint16_t *)&l_port[j][0][0]=tmp0;
 5ca:	11 96       	adiw	r26, 0x01	; 1
 5cc:	1c 93       	st	X, r17
 5ce:	0e 93       	st	-X, r16
   *(uint16_t *)&l_port[j][1][0]=tmp1;
 5d0:	13 96       	adiw	r26, 0x03	; 3
 5d2:	dc 93       	st	X, r29
 5d4:	ce 93       	st	-X, r28
 5d6:	12 97       	sbiw	r26, 0x02	; 2
   *(uint16_t *)&l_port[j][2][0]=tmp2;
 5d8:	15 96       	adiw	r26, 0x05	; 5
 5da:	7c 93       	st	X, r23
 5dc:	6e 93       	st	-X, r22
 5de:	14 97       	sbiw	r26, 0x04	; 4
   *(uint16_t *)&l_port[j][3][0]=tmp3;
 5e0:	17 96       	adiw	r26, 0x07	; 7
 5e2:	5c 93       	st	X, r21
 5e4:	4e 93       	st	-X, r20
 5e6:	16 97       	sbiw	r26, 0x06	; 6
 5e8:	18 96       	adiw	r26, 0x08	; 8
 5ea:	80 e1       	ldi	r24, 0x10	; 16
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	c8 0e       	add	r12, r24
 5f0:	d9 1e       	adc	r13, r25

void l2led()
{
uint8_t i,j,tmp;
uint16_t tmp0,tmp1,tmp2,tmp3;
for(j=0;j<16;j++)
 5f2:	92 e0       	ldi	r25, 0x02	; 2
 5f4:	ad 33       	cpi	r26, 0x3D	; 61
 5f6:	b9 07       	cpc	r27, r25
 5f8:	99 f0       	breq	.+38     	; 0x620 <l2led+0xee>
 5fa:	20 e6       	ldi	r18, 0x60	; 96
 5fc:	e2 2e       	mov	r14, r18
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	f2 2e       	mov	r15, r18
 602:	00 e0       	ldi	r16, 0x00	; 0
 604:	10 e0       	ldi	r17, 0x00	; 0
 606:	c0 e0       	ldi	r28, 0x00	; 0
 608:	d0 e0       	ldi	r29, 0x00	; 0
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	50 e0       	ldi	r21, 0x00	; 0
   {
   tmp0=0;tmp1=0;tmp2=0;tmp3=0;
   for(i=0;i<16;i++)
      {
	  tmp=l[j*16+l_order[i]];
	  tmp0=(tmp0<<1)|((tmp&0x01) ? 0 : 1);
 612:	9d eb       	ldi	r25, 0xBD	; 189
 614:	89 2e       	mov	r8, r25
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	99 2e       	mov	r9, r25
 61a:	8c 0c       	add	r8, r12
 61c:	9d 1c       	adc	r9, r13
 61e:	9d cf       	rjmp	.-198    	; 0x55a <l2led+0x28>
   *(uint16_t *)&l_port[j][0][0]=tmp0;
   *(uint16_t *)&l_port[j][1][0]=tmp1;
   *(uint16_t *)&l_port[j][2][0]=tmp2;
   *(uint16_t *)&l_port[j][3][0]=tmp3;
   }
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	ff 90       	pop	r15
 62a:	ef 90       	pop	r14
 62c:	df 90       	pop	r13
 62e:	cf 90       	pop	r12
 630:	bf 90       	pop	r11
 632:	af 90       	pop	r10
 634:	9f 90       	pop	r9
 636:	8f 90       	pop	r8
 638:	08 95       	ret

0000063a <__vector_4>:

// led update interrupt at variable rate for 4 scans per about 2KHz
ISR(TIMER1_COMPA_vect,ISR_NAKED)
{
// enter interrupt
asm volatile ( 
 63a:	0f 93       	push	r16
 63c:	0f b7       	in	r16, 0x3f	; 63
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	ef 93       	push	r30
 644:	ff 93       	push	r31
 646:	11 27       	eor	r17, r17
"push r31\n\t"
"clr r17\n\t"
::);

// increment row, update phase and ms
asm volatile (
 648:	00 91 b4 00 	lds	r16, 0x00B4
 64c:	03 95       	inc	r16
 64e:	0f 70       	andi	r16, 0x0F	; 15
 650:	00 93 b4 00 	sts	0x00B4, r16
 654:	a1 f4       	brne	.+40     	; 0x67e <done>
 656:	00 91 b5 00 	lds	r16, 0x00B5
 65a:	03 95       	inc	r16
 65c:	03 70       	andi	r16, 0x03	; 3
 65e:	00 93 b5 00 	sts	0x00B5, r16
 662:	31 f4       	brne	.+12     	; 0x670 <tick_ready>
 664:	00 91 b7 00 	lds	r16, 0x00B7
 668:	03 95       	inc	r16
 66a:	00 93 b7 00 	sts	0x00B7, r16
 66e:	00 27       	eor	r16, r16

00000670 <tick_ready>:
 670:	08 94       	sec

00000672 <clockloop>:
 672:	11 1f       	adc	r17, r17
 674:	0a 95       	dec	r16
 676:	ea f7       	brpl	.-6      	; 0x672 <clockloop>
 678:	1b bd       	out	0x2b, r17	; 43
 67a:	11 27       	eor	r17, r17
 67c:	1a bd       	out	0x2a, r17	; 42

0000067e <done>:
:"I" (_SFR_IO_ADDR(OCR1AH)),
"I" (_SFR_IO_ADDR(OCR1AL))
);

// disable all columns and rows
asm volatile (
 67e:	07 e0       	ldi	r16, 0x07	; 7
 680:	0b bb       	out	0x1b, r16	; 27
 682:	0f e1       	ldi	r16, 0x1F	; 31
 684:	08 bb       	out	0x18, r16	; 24
 686:	00 e0       	ldi	r16, 0x00	; 0
 688:	05 bb       	out	0x15, r16	; 21
 68a:	0f ef       	ldi	r16, 0xFF	; 255
 68c:	02 bb       	out	0x12, r16	; 18
 68e:	00 e0       	ldi	r16, 0x00	; 0
 690:	07 b9       	out	0x07, r16	; 7
"I" (_SFR_IO_ADDR(PORTD)),
"I" (_SFR_IO_ADDR(PORTE))
);

// test button
asm volatile (
 692:	00 b3       	in	r16, 0x10	; 16
 694:	00 95       	com	r16
 696:	04 70       	andi	r16, 0x04	; 4
 698:	00 93 b6 00 	sts	0x00B6, r16
 69c:	59 f5       	brne	.+86     	; 0x6f4 <return>
:"I" (_SFR_IO_ADDR(PIND))
);

// first A2 A1 A0 B4 B3 B2 B1 B0 second: D7 D6 D5 D4 D3 D2 D1 D0
// update X-driving port bits from a pre-calculated table
asm volatile (
 69e:	ed eb       	ldi	r30, 0xBD	; 189
 6a0:	f1 e0       	ldi	r31, 0x01	; 1
 6a2:	00 91 b4 00 	lds	r16, 0x00B4
 6a6:	00 0f       	add	r16, r16
 6a8:	00 0f       	add	r16, r16
 6aa:	00 0f       	add	r16, r16
 6ac:	e0 0f       	add	r30, r16
 6ae:	f1 1f       	adc	r31, r17
 6b0:	00 91 b5 00 	lds	r16, 0x00B5
 6b4:	00 0f       	add	r16, r16
 6b6:	e0 0f       	add	r30, r16
 6b8:	f1 1f       	adc	r31, r17
 6ba:	00 81       	ld	r16, Z
 6bc:	02 95       	swap	r16
 6be:	06 95       	lsr	r16
 6c0:	07 70       	andi	r16, 0x07	; 7
 6c2:	0b bb       	out	0x1b, r16	; 27
 6c4:	01 91       	ld	r16, Z+
 6c6:	0f 71       	andi	r16, 0x1F	; 31
 6c8:	08 bb       	out	0x18, r16	; 24
 6ca:	00 81       	ld	r16, Z
 6cc:	02 bb       	out	0x12, r16	; 18
  "I" (_SFR_IO_ADDR(PORTB)),
  "I" (_SFR_IO_ADDR(PORTD))
);

// turn on line bit (y)
asm volatile (
 6ce:	e0 e9       	ldi	r30, 0x90	; 144
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	00 91 b4 00 	lds	r16, 0x00B4
 6d6:	00 0f       	add	r16, r16
 6d8:	e0 0f       	add	r30, r16
 6da:	f1 1f       	adc	r31, r17
 6dc:	01 91       	ld	r16, Z+
 6de:	11 91       	ld	r17, Z+
 6e0:	e0 2f       	mov	r30, r16
 6e2:	ff 27       	eor	r31, r31
 6e4:	00 27       	eor	r16, r16
 6e6:	08 94       	sec

000006e8 <shiftloop>:
 6e8:	00 1f       	adc	r16, r16
 6ea:	1a 95       	dec	r17
 6ec:	ea f7       	brpl	.-6      	; 0x6e8 <shiftloop>
 6ee:	10 81       	ld	r17, Z
 6f0:	10 2b       	or	r17, r16
 6f2:	10 83       	st	Z, r17

000006f4 <return>:
:
: "z" ((uint8_t*) &Y[0])
);

// return from interrupt
asm volatile (
 6f4:	ff 91       	pop	r31
 6f6:	ef 91       	pop	r30
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	0f bf       	out	0x3f, r16	; 63
 6fe:	0f 91       	pop	r16
 700:	18 95       	reti

00000702 <do_rand>:
 702:	a0 e0       	ldi	r26, 0x00	; 0
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	e6 e8       	ldi	r30, 0x86	; 134
 708:	f3 e0       	ldi	r31, 0x03	; 3
 70a:	96 c0       	rjmp	.+300    	; 0x838 <__prologue_saves__+0x10>
 70c:	ec 01       	movw	r28, r24
 70e:	a8 80       	ld	r10, Y
 710:	b9 80       	ldd	r11, Y+1	; 0x01
 712:	ca 80       	ldd	r12, Y+2	; 0x02
 714:	db 80       	ldd	r13, Y+3	; 0x03
 716:	a1 14       	cp	r10, r1
 718:	b1 04       	cpc	r11, r1
 71a:	c1 04       	cpc	r12, r1
 71c:	d1 04       	cpc	r13, r1
 71e:	41 f4       	brne	.+16     	; 0x730 <do_rand+0x2e>
 720:	84 e2       	ldi	r24, 0x24	; 36
 722:	a8 2e       	mov	r10, r24
 724:	89 ed       	ldi	r24, 0xD9	; 217
 726:	b8 2e       	mov	r11, r24
 728:	8b e5       	ldi	r24, 0x5B	; 91
 72a:	c8 2e       	mov	r12, r24
 72c:	87 e0       	ldi	r24, 0x07	; 7
 72e:	d8 2e       	mov	r13, r24
 730:	c6 01       	movw	r24, r12
 732:	b5 01       	movw	r22, r10
 734:	2d e1       	ldi	r18, 0x1D	; 29
 736:	33 ef       	ldi	r19, 0xF3	; 243
 738:	41 e0       	ldi	r20, 0x01	; 1
 73a:	50 e0       	ldi	r21, 0x00	; 0
 73c:	5a d0       	rcall	.+180    	; 0x7f2 <__divmodsi4>
 73e:	27 ea       	ldi	r18, 0xA7	; 167
 740:	31 e4       	ldi	r19, 0x41	; 65
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	36 d0       	rcall	.+108    	; 0x7b4 <__mulsi3>
 748:	7b 01       	movw	r14, r22
 74a:	8c 01       	movw	r16, r24
 74c:	c6 01       	movw	r24, r12
 74e:	b5 01       	movw	r22, r10
 750:	2d e1       	ldi	r18, 0x1D	; 29
 752:	33 ef       	ldi	r19, 0xF3	; 243
 754:	41 e0       	ldi	r20, 0x01	; 1
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	4c d0       	rcall	.+152    	; 0x7f2 <__divmodsi4>
 75a:	ca 01       	movw	r24, r20
 75c:	b9 01       	movw	r22, r18
 75e:	2c ee       	ldi	r18, 0xEC	; 236
 760:	34 ef       	ldi	r19, 0xF4	; 244
 762:	4f ef       	ldi	r20, 0xFF	; 255
 764:	5f ef       	ldi	r21, 0xFF	; 255
 766:	26 d0       	rcall	.+76     	; 0x7b4 <__mulsi3>
 768:	6e 0d       	add	r22, r14
 76a:	7f 1d       	adc	r23, r15
 76c:	80 1f       	adc	r24, r16
 76e:	91 1f       	adc	r25, r17
 770:	97 ff       	sbrs	r25, 7
 772:	04 c0       	rjmp	.+8      	; 0x77c <do_rand+0x7a>
 774:	61 50       	subi	r22, 0x01	; 1
 776:	70 40       	sbci	r23, 0x00	; 0
 778:	80 40       	sbci	r24, 0x00	; 0
 77a:	90 48       	sbci	r25, 0x80	; 128
 77c:	68 83       	st	Y, r22
 77e:	79 83       	std	Y+1, r23	; 0x01
 780:	8a 83       	std	Y+2, r24	; 0x02
 782:	9b 83       	std	Y+3, r25	; 0x03
 784:	9b 01       	movw	r18, r22
 786:	3f 77       	andi	r19, 0x7F	; 127
 788:	c9 01       	movw	r24, r18
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
 78e:	ea e0       	ldi	r30, 0x0A	; 10
 790:	6f c0       	rjmp	.+222    	; 0x870 <__epilogue_restores__+0x10>

00000792 <rand_r>:
 792:	b7 df       	rcall	.-146    	; 0x702 <do_rand>
 794:	08 95       	ret

00000796 <rand>:
 796:	80 eb       	ldi	r24, 0xB0	; 176
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	b3 df       	rcall	.-154    	; 0x702 <do_rand>
 79c:	08 95       	ret

0000079e <srand>:
 79e:	a0 e0       	ldi	r26, 0x00	; 0
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	80 93 b0 00 	sts	0x00B0, r24
 7a6:	90 93 b1 00 	sts	0x00B1, r25
 7aa:	a0 93 b2 00 	sts	0x00B2, r26
 7ae:	b0 93 b3 00 	sts	0x00B3, r27
 7b2:	08 95       	ret

000007b4 <__mulsi3>:
 7b4:	62 9f       	mul	r22, r18
 7b6:	d0 01       	movw	r26, r0
 7b8:	73 9f       	mul	r23, r19
 7ba:	f0 01       	movw	r30, r0
 7bc:	82 9f       	mul	r24, r18
 7be:	e0 0d       	add	r30, r0
 7c0:	f1 1d       	adc	r31, r1
 7c2:	64 9f       	mul	r22, r20
 7c4:	e0 0d       	add	r30, r0
 7c6:	f1 1d       	adc	r31, r1
 7c8:	92 9f       	mul	r25, r18
 7ca:	f0 0d       	add	r31, r0
 7cc:	83 9f       	mul	r24, r19
 7ce:	f0 0d       	add	r31, r0
 7d0:	74 9f       	mul	r23, r20
 7d2:	f0 0d       	add	r31, r0
 7d4:	65 9f       	mul	r22, r21
 7d6:	f0 0d       	add	r31, r0
 7d8:	99 27       	eor	r25, r25
 7da:	72 9f       	mul	r23, r18
 7dc:	b0 0d       	add	r27, r0
 7de:	e1 1d       	adc	r30, r1
 7e0:	f9 1f       	adc	r31, r25
 7e2:	63 9f       	mul	r22, r19
 7e4:	b0 0d       	add	r27, r0
 7e6:	e1 1d       	adc	r30, r1
 7e8:	f9 1f       	adc	r31, r25
 7ea:	bd 01       	movw	r22, r26
 7ec:	cf 01       	movw	r24, r30
 7ee:	11 24       	eor	r1, r1
 7f0:	08 95       	ret

000007f2 <__divmodsi4>:
 7f2:	97 fb       	bst	r25, 7
 7f4:	09 2e       	mov	r0, r25
 7f6:	05 26       	eor	r0, r21
 7f8:	0e d0       	rcall	.+28     	; 0x816 <__divmodsi4_neg1>
 7fa:	57 fd       	sbrc	r21, 7
 7fc:	04 d0       	rcall	.+8      	; 0x806 <__divmodsi4_neg2>
 7fe:	4b d0       	rcall	.+150    	; 0x896 <__udivmodsi4>
 800:	0a d0       	rcall	.+20     	; 0x816 <__divmodsi4_neg1>
 802:	00 1c       	adc	r0, r0
 804:	38 f4       	brcc	.+14     	; 0x814 <__divmodsi4_exit>

00000806 <__divmodsi4_neg2>:
 806:	50 95       	com	r21
 808:	40 95       	com	r20
 80a:	30 95       	com	r19
 80c:	21 95       	neg	r18
 80e:	3f 4f       	sbci	r19, 0xFF	; 255
 810:	4f 4f       	sbci	r20, 0xFF	; 255
 812:	5f 4f       	sbci	r21, 0xFF	; 255

00000814 <__divmodsi4_exit>:
 814:	08 95       	ret

00000816 <__divmodsi4_neg1>:
 816:	f6 f7       	brtc	.-4      	; 0x814 <__divmodsi4_exit>
 818:	90 95       	com	r25
 81a:	80 95       	com	r24
 81c:	70 95       	com	r23
 81e:	61 95       	neg	r22
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	08 95       	ret

00000828 <__prologue_saves__>:
 828:	2f 92       	push	r2
 82a:	3f 92       	push	r3
 82c:	4f 92       	push	r4
 82e:	5f 92       	push	r5
 830:	6f 92       	push	r6
 832:	7f 92       	push	r7
 834:	8f 92       	push	r8
 836:	9f 92       	push	r9
 838:	af 92       	push	r10
 83a:	bf 92       	push	r11
 83c:	cf 92       	push	r12
 83e:	df 92       	push	r13
 840:	ef 92       	push	r14
 842:	ff 92       	push	r15
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	ca 1b       	sub	r28, r26
 852:	db 0b       	sbc	r29, r27
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	f8 94       	cli
 858:	de bf       	out	0x3e, r29	; 62
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	cd bf       	out	0x3d, r28	; 61
 85e:	09 94       	ijmp

00000860 <__epilogue_restores__>:
 860:	2a 88       	ldd	r2, Y+18	; 0x12
 862:	39 88       	ldd	r3, Y+17	; 0x11
 864:	48 88       	ldd	r4, Y+16	; 0x10
 866:	5f 84       	ldd	r5, Y+15	; 0x0f
 868:	6e 84       	ldd	r6, Y+14	; 0x0e
 86a:	7d 84       	ldd	r7, Y+13	; 0x0d
 86c:	8c 84       	ldd	r8, Y+12	; 0x0c
 86e:	9b 84       	ldd	r9, Y+11	; 0x0b
 870:	aa 84       	ldd	r10, Y+10	; 0x0a
 872:	b9 84       	ldd	r11, Y+9	; 0x09
 874:	c8 84       	ldd	r12, Y+8	; 0x08
 876:	df 80       	ldd	r13, Y+7	; 0x07
 878:	ee 80       	ldd	r14, Y+6	; 0x06
 87a:	fd 80       	ldd	r15, Y+5	; 0x05
 87c:	0c 81       	ldd	r16, Y+4	; 0x04
 87e:	1b 81       	ldd	r17, Y+3	; 0x03
 880:	aa 81       	ldd	r26, Y+2	; 0x02
 882:	b9 81       	ldd	r27, Y+1	; 0x01
 884:	ce 0f       	add	r28, r30
 886:	d1 1d       	adc	r29, r1
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	f8 94       	cli
 88c:	de bf       	out	0x3e, r29	; 62
 88e:	0f be       	out	0x3f, r0	; 63
 890:	cd bf       	out	0x3d, r28	; 61
 892:	ed 01       	movw	r28, r26
 894:	08 95       	ret

00000896 <__udivmodsi4>:
 896:	a1 e2       	ldi	r26, 0x21	; 33
 898:	1a 2e       	mov	r1, r26
 89a:	aa 1b       	sub	r26, r26
 89c:	bb 1b       	sub	r27, r27
 89e:	fd 01       	movw	r30, r26
 8a0:	0d c0       	rjmp	.+26     	; 0x8bc <__udivmodsi4_ep>

000008a2 <__udivmodsi4_loop>:
 8a2:	aa 1f       	adc	r26, r26
 8a4:	bb 1f       	adc	r27, r27
 8a6:	ee 1f       	adc	r30, r30
 8a8:	ff 1f       	adc	r31, r31
 8aa:	a2 17       	cp	r26, r18
 8ac:	b3 07       	cpc	r27, r19
 8ae:	e4 07       	cpc	r30, r20
 8b0:	f5 07       	cpc	r31, r21
 8b2:	20 f0       	brcs	.+8      	; 0x8bc <__udivmodsi4_ep>
 8b4:	a2 1b       	sub	r26, r18
 8b6:	b3 0b       	sbc	r27, r19
 8b8:	e4 0b       	sbc	r30, r20
 8ba:	f5 0b       	sbc	r31, r21

000008bc <__udivmodsi4_ep>:
 8bc:	66 1f       	adc	r22, r22
 8be:	77 1f       	adc	r23, r23
 8c0:	88 1f       	adc	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	1a 94       	dec	r1
 8c6:	69 f7       	brne	.-38     	; 0x8a2 <__udivmodsi4_loop>
 8c8:	60 95       	com	r22
 8ca:	70 95       	com	r23
 8cc:	80 95       	com	r24
 8ce:	90 95       	com	r25
 8d0:	9b 01       	movw	r18, r22
 8d2:	ac 01       	movw	r20, r24
 8d4:	bd 01       	movw	r22, r26
 8d6:	cf 01       	movw	r24, r30
 8d8:	08 95       	ret

000008da <_exit>:
 8da:	f8 94       	cli

000008dc <__stop_program>:
 8dc:	ff cf       	rjmp	.-2      	; 0x8dc <__stop_program>
